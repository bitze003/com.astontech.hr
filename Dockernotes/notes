                           *********BUILDING DOCKER LOCALLY*************

** If your application is using JSP files, in your pom change your packaging group to 'war' files from 'jar'.

    <groupId>com.astontech.hr</groupId>
    <artifactId>com.astontech.hr</artifactId>
    <packaging>war</packaging>
    <version>1.0-SNAPSHOT</version>
    <parent>

**In your pom <proroperties>  add:
<docker.image.prefix>'the name of your dockerhub acct'</docker.image.prefix>

**Add dockerhub build plugins into your pom:

           <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>dockerfile-maven-plugin</artifactId>
                <version>1.4.9</version>
                <configuration>
                    <repository>${docker.image.prefix}/${project.artifactId}</repository>
                </configuration>
            </plugin>
            <!-- end::plugin[] -->

            <!-- tag::unpack[] -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack</id>
                        <phase>package</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>${project.groupId}</groupId>
                                    <artifactId>${project.artifactId}</artifactId>
                                    <version>${project.version}</version>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

*********If you're not in root or a rootuser you will need to run**********
sudo su
***********************************************************

**Install docker using your terminal run command:
sudo snap install docker
sudo apt install docker.io

**Check if docker was installed by running:
docker ps
or
docker -v

**Create a dockerfile.  Add a file called "Dockerfile" to the top module of your application.
**insert into the file:
FROM openjdk:8-jdk-alpine
VOLUME /tmp
COPY /target/com.astontech.hr-1.0-SNAPSHOT.war app.war
ENTRYPOINT ["java","-jar","/app.war"]
** The file path under "COPY" should be to YOUR built target snapshot file.

**Build the docker file by the docker image by running:
mvn install dockerfile:build -DskipTests

**run docker and set the port you would like it open to:
docker run -p 8080:8080 -t bitze003/com.astontech.hr

**look at your docker images by running:
docker images

**If you want to stop docker from running take the image's ID and run
docker stop "image'sID"

**push your docker image to your docker hub run:
docker login
**enter your docker creds
**then push your latest docker image to your docker hub run
docker push bitze003/com.astontech.hr:latest

                    ******************Building docker on EC2 instance*********************

**Open and connect to your EC2 instance by running:
ssh -i "your pem key" ubuntu@your private DNS

** install docker, run the following commands:
****you may need to sudo su in the EC2 server****
apt-get install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
add-apt-repository "deb https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") $(lsb_release -cs) stable"
apt-get update && apt-get install -y docker-ce=$(apt-cache madison docker-ce | grep 17.03 | head -1 | awk '{print $3}')
snap install docker
apt install docker.io
docker login

**use your docker login creds**
docker run -p 8080:8080 -t bitze003/com.astontech.hr

** if all your ports are open on your EC2 instance you should be able to connect through your Public DNS (IPv4).








